#pragma once
#include "pch.h"

namespace Phe
{
	#define HDR_FORMAT P_TextureFormat::P_FORMAT_R16G16B16A16_FLOAT
	#define LDR_FORMAT P_TextureFormat::P_FORMAT_R8G8B8A8_UNORM
	#define DepthStencil_Format P_TextureFormat::P_FORMAT_D24_UNORM_S8_UINT
	#define RGBOnly_Format P_TextureFormat::P_FORMAT_R11G11B10_FLOAT
	#define ROnly_Format P_TextureFormat::P_FORMAT_R8_UNORM

	enum class P_TextureFormat
	{
		P_FORMAT_UNKNOWN = 0,
		P_FORMAT_R32G32B32A32_TYPELESS = 1,
		P_FORMAT_R32G32B32A32_FLOAT = 2,
		P_FORMAT_R32G32B32A32_UINT = 3,
		P_FORMAT_R32G32B32A32_SINT = 4,
		P_FORMAT_R32G32B32_TYPELESS = 5,
		P_FORMAT_R32G32B32_FLOAT = 6,
		P_FORMAT_R32G32B32_UINT = 7,
		P_FORMAT_R32G32B32_SINT = 8,
		P_FORMAT_R16G16B16A16_TYPELESS = 9,
		P_FORMAT_R16G16B16A16_FLOAT = 10,
		P_FORMAT_R16G16B16A16_UNORM = 11,
		P_FORMAT_R16G16B16A16_UINT = 12,
		P_FORMAT_R16G16B16A16_SNORM = 13,
		P_FORMAT_R16G16B16A16_SINT = 14,
		P_FORMAT_R32G32_TYPELESS = 15,
		P_FORMAT_R32G32_FLOAT = 16,
		P_FORMAT_R32G32_UINT = 17,
		P_FORMAT_R32G32_SINT = 18,
		P_FORMAT_R32G8X24_TYPELESS = 19,
		P_FORMAT_D32_FLOAT_S8X24_UINT = 20,
		P_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
		P_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
		P_FORMAT_R10G10B10A2_TYPELESS = 23,
		P_FORMAT_R10G10B10A2_UNORM = 24,
		P_FORMAT_R10G10B10A2_UINT = 25,
		P_FORMAT_R11G11B10_FLOAT = 26,
		P_FORMAT_R8G8B8A8_TYPELESS = 27,
		P_FORMAT_R8G8B8A8_UNORM = 28,
		P_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
		P_FORMAT_R8G8B8A8_UINT = 30,
		P_FORMAT_R8G8B8A8_SNORM = 31,
		P_FORMAT_R8G8B8A8_SINT = 32,
		P_FORMAT_R16G16_TYPELESS = 33,
		P_FORMAT_R16G16_FLOAT = 34,
		P_FORMAT_R16G16_UNORM = 35,
		P_FORMAT_R16G16_UINT = 36,
		P_FORMAT_R16G16_SNORM = 37,
		P_FORMAT_R16G16_SINT = 38,
		P_FORMAT_R32_TYPELESS = 39,
		P_FORMAT_D32_FLOAT = 40,
		P_FORMAT_R32_FLOAT = 41,
		P_FORMAT_R32_UINT = 42,
		P_FORMAT_R32_SINT = 43,
		P_FORMAT_R24G8_TYPELESS = 44,
		P_FORMAT_D24_UNORM_S8_UINT = 45,
		P_FORMAT_R24_UNORM_X8_TYPELESS = 46,
		P_FORMAT_X24_TYPELESS_G8_UINT = 47,
		P_FORMAT_R8G8_TYPELESS = 48,
		P_FORMAT_R8G8_UNORM = 49,
		P_FORMAT_R8G8_UINT = 50,
		P_FORMAT_R8G8_SNORM = 51,
		P_FORMAT_R8G8_SINT = 52,
		P_FORMAT_R16_TYPELESS = 53,
		P_FORMAT_R16_FLOAT = 54,
		P_FORMAT_D16_UNORM = 55,
		P_FORMAT_R16_UNORM = 56,
		P_FORMAT_R16_UINT = 57,
		P_FORMAT_R16_SNORM = 58,
		P_FORMAT_R16_SINT = 59,
		P_FORMAT_R8_TYPELESS = 60,
		P_FORMAT_R8_UNORM = 61,
		P_FORMAT_R8_UINT = 62,
		P_FORMAT_R8_SNORM = 63,
		P_FORMAT_R8_SINT = 64,
		P_FORMAT_A8_UNORM = 65,
		P_FORMAT_R1_UNORM = 66,
		P_FORMAT_R9G9B9E5_SHAREDEXP = 67,
		P_FORMAT_R8G8_B8G8_UNORM = 68,
		P_FORMAT_G8R8_G8B8_UNORM = 69,
		P_FORMAT_BC1_TYPELESS = 70,
		P_FORMAT_BC1_UNORM = 71,
		P_FORMAT_BC1_UNORM_SRGB = 72,
		P_FORMAT_BC2_TYPELESS = 73,
		P_FORMAT_BC2_UNORM = 74,
		P_FORMAT_BC2_UNORM_SRGB = 75,
		P_FORMAT_BC3_TYPELESS = 76,
		P_FORMAT_BC3_UNORM = 77,
		P_FORMAT_BC3_UNORM_SRGB = 78,
		P_FORMAT_BC4_TYPELESS = 79,
		P_FORMAT_BC4_UNORM = 80,
		P_FORMAT_BC4_SNORM = 81,
		P_FORMAT_BC5_TYPELESS = 82,
		P_FORMAT_BC5_UNORM = 83,
		P_FORMAT_BC5_SNORM = 84,
		P_FORMAT_B5G6R5_UNORM = 85,
		P_FORMAT_B5G5R5A1_UNORM = 86,
		P_FORMAT_B8G8R8A8_UNORM = 87,
		P_FORMAT_B8G8R8X8_UNORM = 88,
		P_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
		P_FORMAT_B8G8R8A8_TYPELESS = 90,
		P_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
		P_FORMAT_B8G8R8X8_TYPELESS = 92,
		P_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
		P_FORMAT_BC6H_TYPELESS = 94,
		P_FORMAT_BC6H_UF16 = 95,
		P_FORMAT_BC6H_SF16 = 96,
		P_FORMAT_BC7_TYPELESS = 97,
		P_FORMAT_BC7_UNORM = 98,
		P_FORMAT_BC7_UNORM_SRGB = 99,
		P_FORMAT_AYUV = 100,
		P_FORMAT_Y410 = 101,
		P_FORMAT_Y416 = 102,
		P_FORMAT_NV12 = 103,
		P_FORMAT_P010 = 104,
		P_FORMAT_P016 = 105,
		P_FORMAT_420_OPAQUE = 106,
		P_FORMAT_YUY2 = 107,
		P_FORMAT_Y210 = 108,
		P_FORMAT_Y216 = 109,
		P_FORMAT_NV11 = 110,
		P_FORMAT_AI44 = 111,
		P_FORMAT_IA44 = 112,
		P_FORMAT_P8 = 113,
		P_FORMAT_A8P8 = 114,
		P_FORMAT_B4G4R4A4_UNORM = 115,

		P_FORMAT_P208 = 130,
		P_FORMAT_V208 = 131,
		P_FORMAT_V408 = 132,

		P_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189,
		P_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190,

	};

	class PGPUTexture;
	class PMaterial;
	class PTexture
	{
	public:
		PTexture(std::string TextureName, std::wstring TexturePathName);
		~PTexture();

		std::string GetTextureName() { return PTextureName; }
		std::wstring GetTextureFileName() { return PTexturePathName; }

		void BindMaterial(PMaterial* Material);
		void BindGPUTexture(PGPUTexture* LinkedGPUTexture);
		PGPUTexture* GetGPUTexture() { return PLinkedGPUTexture; }
	private:
		std::string PTextureName;
		std::wstring PTexturePathName;

		std::unordered_multimap<std::string, PMaterial*> PLinkedMaterial;
		PGPUTexture* PLinkedGPUTexture;
	};


}